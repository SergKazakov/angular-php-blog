/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

@font-face {
  font-family: Rockwell;
  font-weight: normal;
  font-style: normal;
  src: url('../fonts/rockwell-webfont.eot');
  src: url('../fonts/rockwell-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/rockwell-webfont.woff') format('woff'), url('../fonts/rockwell-webfont.ttf') format('truetype'), url('../fonts/rockwell-webfont.svg#Rockwell') format('svg'); }

@font-face {
  font-family: Rockwell;
  font-weight: bold;
  font-style: normal;
  src: url('../fonts/rockwell-bold-webfont.eot');
  src: url('../fonts/rockwell-bold-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/rockwell-bold-webfont.woff') format('woff'), url('../fonts/rockwell-bold-webfont.ttf') format('truetype'), url('../fonts/rockwell-bold-webfont.svg#Rockwell') format('svg'); }

.logo {
  position: absolute;
  left: 50%;
  -webkit-transform: translate(-50%);
          transform: translate(-50%); }

.post-date__inner {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%); }

.nav:before, .post:before, .form__row:before, .user-card:before, .nav:after, .post:after, .form__row:after, .user-card:after {
  content: '';
  display: table; }
.nav:after, .post:after, .form__row:after, .user-card:after {
  clear: both; }

.container {
  max-width: 970px;
  margin: 0 auto; }

*, *:before, *:after {
  box-sizing: border-box; }

html {
  position: relative; }

body {
  font: 16px/1.2 Rockwell; }

ul {
  padding: 0;
  list-style-type: none;
  margin: 0; }

a {
  text-decoration: none; }

img {
  max-width: 100%; }

input, textarea {
  border: 0;
  font-family: Rockwell; }

input:focus, textarea:focus, button:focus {
  outline: 0; }

@font-face {
  font-family: "blog";
  src: url("../fonts/blog.eot");
  src: url("../fonts/blog.eot?#iefix") format("embedded-opentype"), url("../fonts/blog.woff") format("woff"), url("../fonts/blog.ttf") format("truetype"), url("../fonts/blog.svg#blog") format("svg");
  font-weight: normal;
  font-style: normal; }

[data-icon]:before {
  font-family: "blog" !important;
  content: attr(data-icon);
  font-style: normal !important;
  font-weight: normal !important;
  font-variant: normal !important;
  text-transform: none !important;
  speak: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

[class^="icon-"]:before, [class*=" icon-"]:before {
  font-family: "blog" !important;
  font-style: normal !important;
  font-weight: normal !important;
  font-variant: normal !important;
  text-transform: none !important;
  speak: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-heart:before {
  content: "a"; }

.icon-comment:before {
  content: "b"; }

.hero {
  background: url(../img/hero-bg.jpg) no-repeat;
  background-size: cover;
  height: 350px;
  display: none; }
  @media screen and (min-height: 351px) {
    .hero {
      display: block; } }

.page {
  position: relative;
  z-index: 1;
  background: #fff; }
  .page:before {
    content: '';
    position: absolute;
    height: 1px;
    width: 100%;
    top: 105.5px;
    background: rgba(183, 183, 183, 0.45); }
    @media screen and (min-height: 351px) {
      .page:before {
        top: 85px; } }

.container {
  padding: 0 15px; }

.nav {
  position: relative;
  padding: 125px 0 10px;
  text-align: center; }
  @media screen and (min-width: 993px) {
    .nav {
      padding: 0 0 10px 0;
      text-align: left; } }
  @media screen and (min-width: 993px) {
    .nav-left {
      float: left; } }
  @media screen and (min-width: 993px) {
    .nav-right {
      float: right; } }
  .nav__item {
    display: block;
    padding: 26px 0 6px;
    transition: all 300ms; }
    @media screen and (min-width: 993px) {
      .nav__item {
        display: inline-block;
        padding: 26px 36px 6px 14px; } }
    .nav__item:last-child {
      padding-right: 4px; }
    .nav__item:hover .nav__item-link {
      color: #3eb3a5;
      border-color: rgba(54, 54, 54, 0.4); }
    .nav__item:hover .has-caret:after {
      border-top-color: #3eb3a5; }
    .nav__item-link {
      display: inline-block;
      color: #bcbcbc;
      letter-spacing: 2px;
      padding-bottom: 8px;
      font-size: 1.5em;
      font-weight: 700;
      line-height: 1.25;
      transition: all 300ms;
      border-bottom: 5px solid transparent; }
      .nav__item-link_active {
        color: #3eb3a5;
        border-color: rgba(54, 54, 54, 0.4); }

.has-caret {
  position: relative; }
  .has-caret:after {
    content: '';
    position: absolute;
    height: 0;
    width: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 9px solid #e1e1e1;
    right: -17px;
    top: 11px; }

.has-dropdown {
  position: relative; }

.dropdown-wr {
  display: none;
  position: fixed;
  background: rgba(255, 255, 255, 0.9);
  z-index: 2;
  left: 0;
  top: 0;
  bottom: 0;
  height: 100%;
  width: 100%; }
  .dropdown-wr_active {
    display: table; }
    @media screen and (min-width: 993px) {
      .dropdown-wr_active {
        display: block;
        bottom: auto; } }
  @media screen and (min-width: 993px) {
    .dropdown-wr {
      position: absolute;
      top: 100%;
      padding: 3px 21px 27px 14px;
      border: 1px solid #d8d8d8;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
      border-radius: 5px;
      height: auto;
      width: 227px;
      background: #fff; } }
@media screen and (max-width: 992px) {
  .dropdown {
    display: table-cell;
    vertical-align: middle;
    padding: 0 15px; } }
@media screen and (min-width: 993px) {
  .dropdown__item {
    border-bottom: 1px solid #e1e1e1; } }
.dropdown__item-link {
  display: block;
  padding: 18px 0 17px 8px;
  font-size: 1.125em;
  color: #000;
  letter-spacing: 1px;
  transition: all 300ms; }
  @media screen and (min-width: 993px) {
    .dropdown__item-link {
      color: #bcbcbc; } }
  .dropdown__item-link:hover {
    color: #3eb3a5; }
.dropdown-close {
  position: absolute;
  padding: 20px;
  display: inline-block;
  right: 0;
  top: 0; }

.icon-bar {
  position: relative;
  width: 2em;
  height: 0.2em;
  display: block;
  background: #000;
  top: 0.2em;
  -webkit-transform: rotate(-45deg);
  transform: rotate(-45deg); }
  @media screen and (min-width: 993px) {
    .icon-bar {
      display: none; } }
  .icon-bar + .icon-bar {
    margin-top: 0.3em;
    top: -0.3em;
    -webkit-transform: rotate(45deg);
    transform: rotate(45deg); }

.logo {
  display: inline-block;
  overflow: hidden;
  top: 0;
  height: 211px;
  width: 211px;
  border-radius: 50%; }
  @media screen and (min-height: 351px) {
    .logo {
      top: -92px; } }
  .logo__img {
    transition: all 300ms; }
    .logo__img:hover {
      -webkit-transform: rotate(360deg);
              transform: rotate(360deg); }

.greeting {
  color: #a0a0a0;
  font-size: 1.13em;
  font-weight: 400;
  line-height: 1.667;
  position: relative;
  text-align: center;
  margin: 99px 0 50px; }
  .greeting:before, .greeting:after {
    content: '';
    position: absolute;
    display: inline-block;
    height: 1px;
    width: 32px;
    background: #b7b7b7;
    left: 50%;
    margin-left: -16px; }
  .greeting:before {
    bottom: -4px; }
  .greeting:after {
    bottom: -9px; }
  .greeting__link {
    color: #a0a0a0;
    font-weight: 700;
    letter-spacing: 2px;
    transition: all 300ms; }
    .greeting__link:hover {
      color: #606060; }

.posts {
  text-align: center; }

.post {
  padding: 0 0 38px 0;
  position: relative;
  border-bottom: 1px dashed #d7d7d7;
  margin-bottom: 35px;
  text-align: left; }
  @media screen and (min-width: 769px) {
    .post {
      padding: 0 0 38px 123px; } }
  .post-date {
    position: relative;
    margin: 0 auto;
    border-radius: 50%;
    border: 6.69px solid #ebebeb;
    height: 123px;
    width: 123px; }
    @media screen and (min-width: 769px) {
      .post-date {
        position: absolute;
        left: 0;
        top: 3px; } }
    .post-date__inner {
      color: #3eb3a5;
      font-size: 1.88em;
      font-weight: 700;
      line-height: 1;
      white-space: pre;
      letter-spacing: 2px; }
  .post-info {
    padding: 30px 0 9px;
    border-bottom: 1px solid #ebebeb; }
    @media screen and (min-width: 481px) {
      .post-info {
        padding: 30px 0 9px 13px; } }
    .post-info__item {
      display: block;
      color: #c0c0c0;
      font-size: 0.88em;
      line-height: 1.714;
      position: relative;
      padding: 0 0 0 13px; }
      @media screen and (min-width: 481px) {
        .post-info__item {
          display: inline-block;
          padding: 0 11px 0 0; }
          .post-info__item + .post-info__item {
            border-left: 1px solid #ebebeb; } }
      .post-info__item-link {
        color: #3eb3a5;
        transition: all 300ms; }
        .post-info__item-link:hover {
          color: #2a7a71; }
      .post-info__item_like {
        padding-left: 35px; }
      .post-info__item_comment {
        padding-left: 45px; }
      .post-info__item_like:before, .post-info__item_comment:before {
        position: absolute;
        color: #3eb3a5;
        font-size: 18px;
        top: 3px; }
      .post-info__item_like:before {
        left: 13px; }
        @media screen and (min-width: 481px) {
          .post-info__item_like:before {
            left: 12px; } }
      .post-info__item_comment:before {
        left: 13px; }
  .post-container {
    padding: 0 0 0 13px; }
  .post-header {
    color: #272626;
    font-size: 1.6875em;
    font-weight: 700;
    line-height: 1;
    letter-spacing: 4px;
    margin: 24px 0 15px; }
  .post-body {
    color: #8e8e8e;
    font-size: 1em;
    line-height: 1.5;
    margin-bottom: 14px; }
  .post-empty {
    text-align: center;
    font-size: 2.5em; }
  .post-actions__item {
    display: inline-block; }
    .post-actions__item + .post-actions__item:before {
      content: '/';
      margin: 0 5px;
      color: #8e8e8e; }
  .post-actions__link {
    color: #3eb3a5;
    font-size: 1em;
    font-weight: 700;
    line-height: 1.5;
    border-bottom: 1px solid #e1e1e1;
    letter-spacing: 1px;
    padding-bottom: 1px;
    transition: all 300ms; }
    .post-actions__link:hover {
      color: #2a7a71; }

.btn {
  display: inline-block;
  background: #3eb3a5;
  color: #fff;
  font-size: 1.13em;
  font-weight: 700;
  line-height: 1.667;
  transition: all 300ms;
  padding: 10px 22px;
  letter-spacing: 1px;
  transition: all 300ms;
  cursor: pointer;
  border: 0; }
  .btn:hover {
    background: #318d82; }
  .btn_block {
    display: block;
    width: 100%; }
  .btn_danger {
    background: #ff4d4d; }
    .btn_danger:hover {
      background: #b30000; }

.form {
  position: relative; }
  @media screen and (min-width: 993px) {
    .form_login {
      margin: 140px auto 0;
      max-width: 500px; } }
  .form__img {
    border-radius: 50%;
    height: 120px;
    width: 120px;
    margin: 0 auto;
    display: block; }
  .form__title {
    color: #272626;
    font-size: 1.6875em;
    font-weight: 700;
    line-height: 1;
    letter-spacing: 4px; }
    .form__title_center {
      text-align: center; }
  .form__row {
    margin: 20px 0; }
  .form__input, .form__textarea {
    display: block;
    width: 100%;
    background: #ebebeb;
    font-size: 1em;
    padding: 15px 10px;
    transition: all 300ms; }
    .form__input:hover, .form__input:focus, .form__textarea:hover, .form__textarea:focus {
      background: #d2d2d2; }
  .form__input_search {
    background: #fff;
    border: 1px solid #ebebeb;
    margin: 30px 0; }
    .form__input_search:hover, .form__input_search:focus {
      background: #fff;
      border-color: #ababab; }
  .form__textarea {
    resize: vertical;
    min-height: 200px; }
  .form__info {
    color: #8e8e8e;
    text-align: center;
    font-size: 1.125em; }
  .form__link {
    color: #3eb3a5;
    font-weight: 700;
    transition: all 300ms;
    letter-spacing: 1.5px; }
    .form__link:hover {
      color: #24675f; }
  .form__error {
    color: #fff;
    background: #ff4d4d;
    font-size: 1.125em;
    text-align: center;
    padding: 14px 0; }

.loading-bar {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  z-index: 100; }
  .loading-bar__img {
    position: absolute;
    -webkit-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
    left: 50%;
    top: 50%; }

.footer {
  padding: 80px 0; }

.copyright {
  text-align: center;
  color: #aeaeae;
  font-size: 1.13em;
  line-height: 1.667;
  letter-spacing: 1px; }
  .copyright-link {
    color: #3eb3a5;
    font-weight: 700; }
    .copyright-link:hover {
      color: #318d82; }

.user-card {
  border: 1px solid #ebebeb;
  padding: 20px; }
  @media screen and (min-width: 769px) {
    .user-card {
      margin: 0 15%; } }
  @media screen and (min-width: 993px) {
    .user-card-aside, .user-card-content {
      float: left; } }
  .user-card-aside {
    text-align: center; }
    @media screen and (min-width: 993px) {
      .user-card-aside {
        width: 30%; } }
  @media screen and (min-width: 993px) {
    .user-card-content {
      width: 70%; } }
  .user-card__img {
    border-radius: 50%;
    border: 10px solid #eee; }
    @media screen and (min-width: 993px) {
      .user-card__img {
        margin: 40px 0; } }
  .user-card__name {
    text-align: center;
    font-size: 1.5em;
    margin: 10px 0;
    letter-spacing: 2px; }
    @media screen and (min-width: 769px) {
      .user-card__name {
        text-align: left; } }
  .user-card-info__item {
    display: table;
    width: 100%;
    padding: 15px 0;
    color: #a0a0a0;
    font-size: 1.125em; }
    .user-card-info__item + .user-card-info__item {
      border-top: 1px solid #a0a0a0; }
  .user-card-info__label, .user-card-info__value {
    display: table-cell;
    vertical-align: middle; }
  .user-card-info__label {
    display: none; }
    @media screen and (min-width: 769px) {
      .user-card-info__label {
        display: table-cell;
        width: 40%; } }
  .user-card-info__value {
    text-align: center; }
    @media screen and (min-width: 769px) {
      .user-card-info__value {
        width: 60%; } }

.friends-list {
  border: 1px solid #ebebeb;
  padding: 20px 40px; }
  @media screen and (min-width: 769px) {
    .friends-list {
      margin: 0 15%; } }
  .friends-list__item {
    display: table;
    width: 100%;
    margin: 20px 0; }
  .friends-list__name, .friends-list__actions {
    display: table-cell;
    vertical-align: middle; }
  .friends-list__name {
    width: 40%; }
  .friends-list__link {
    font-size: 1.5em;
    font-weight: 700;
    color: #000;
    letter-spacing: 2px;
    transition: all 300ms; }
    .friends-list__link:hover {
      color: gray; }
  .friends-list__actions {
    width: 60%;
    text-align: center; }


/*# sourceMappingURL=data:application/json;base64, */